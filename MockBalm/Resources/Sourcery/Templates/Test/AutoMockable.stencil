{% for type in types.implementing.AutoMockable %}
// sourcery:file:Mock{{ type.name}}+AutoMockable

{# Add required swiftlint exemptions here #}
// swiftlint:disable superfluous_disable_command
// swiftlint:disable line_length
// swiftlint:disable comma

// This list is autogenerated and may contain imports that are unnecessary for this particular class
import Foundation
import CoreData
import UIKit
{# Add required imports here #}
@testable import tasktime_ios_swift

// Autogenerated code
class Mock{{type.name}}: {{type.name}} {
    {% for method in type.methods %}
    {% if method.accessLevel != 'private' %}

    // Function {{ method.selectorName }} with return type {{method.returnTypeName}}
    {% if method.parameters.count > 0 %}
    typealias Params_{{method.shortName}} = (
        {% for param in method.parameters %}
        {% if method.parameters.count > 1 %}{{param.name}}: {% endif %}{{param.typeName}}{% if not forloop.last %},{% endif %}
        {% endfor %}
    )
    {% else %}
    typealias Params_{{method.shortName}} = Void
    {% endif %}
    {% if method.returnTypeName.isVoid %}
    let stub_{{method.shortName}} = StubWithNoReturnValue<Params_{{method.shortName}}>()
    {% else %}
    let stub_{{method.shortName}} = Stub<{{method.returnTypeName}}, Params_{{method.shortName}}>(defaultRetval: {{method.annotations.mockDefaultRetval}})
    {% endif %}
    override func {{method.name}} {% if not method.returnTypeName.isVoid %}-> {{method.returnTypeName}} {% endif %}{
        {% if not method.returnTypeName.isVoid %}return {% endif %}stub_{{method.shortName}}.executeWithoutThrowable(params: (
            {% if method.parameters.count > 0 %}
            {% for param in method.parameters %}
            {% if method.parameters.count > 1 %}{{param.name}}: {% endif %}{{param.name}}{% if not forloop.last %},{% endif %}
            {% endfor %}
            {% else %}
            Void()
            {% endif %}
        ))
    }
  {% endif %}{# accessLevel #}
  {% endfor %}{# for method in type.methods #}
  {% for var in type.variables|!static|!annotated:"mockIgnore" %}
    {% if var.readAccess != 'private'%}

    var {{var.name}}_retval = {{var.annotations.mockDefaultRetval}}
    override var {{var.name}}: {{var.typeName}} {
      return {{var.name}}_retval
    }
    {% endif %}{# accessLevel #}
  {% endfor %}{# for method in type.methods #}
}
// sourcery:end
{% endfor %}{# for type in types.implementing.AutoMockable #}
